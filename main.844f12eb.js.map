{"version":3,"sources":["scripts/main.js"],"names":["mainButton","document","querySelector","rowsAmount","querySelectorAll","length","looseMessage","winMessage","score","fieldMatrix","WIN_SCORE","scoreInner","i","rowCells","empTyArr","push","j","moveUp","field","isPossible","lastDoubledIndex","innerHTML","upIndex","isDoubled","cellScore","upCellScore","swapCells","doubledNumber","addToRandomCell","moveDown","downIndex","downCellScore","moveLeft","leftIndex","leftCellScore","moveRight","rightIndex","rightCellScore","isLost","findIndex","cell","topIndex","currentCellScore","isWon","mainCell","targetCell","mainCellScore","className","emptyCells","forEach","row","randomIndex","Math","floor","random","numberToAdd","classList","add","clearfield","addEventListener","e","key","remove","innerText","contains"],"mappings":"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","file":"main.844f12eb.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst mainButton = document.querySelector('.button');\nconst rowsAmount = document.querySelectorAll('.field-row').length;\nconst looseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst score = document.querySelector('.game-score');\nconst fieldMatrix = [];\nconst WIN_SCORE = '2048';\nlet scoreInner = 0;\n\nfor (let i = 0; i < rowsAmount; i++) {\n  const rowCells = document.querySelectorAll(`.field-row:nth-child(${i + 1}) `\n  + `.field-cell`);\n  const empTyArr = [];\n\n  fieldMatrix.push(empTyArr);\n\n  for (let j = 0; j < rowCells.length; j++) {\n    fieldMatrix[i].push(rowCells[j]);\n  }\n}\n\ndocument.addEventListener('keydown', e => {\n  if (e.key === 'ArrowUp') {\n    moveUp(fieldMatrix);\n  }\n\n  if (e.key === 'ArrowDown') {\n    moveDown(fieldMatrix);\n  }\n\n  if (e.key === 'ArrowLeft') {\n    moveLeft(fieldMatrix);\n  }\n\n  if (e.key === 'ArrowRight') {\n    moveRight(fieldMatrix);\n  }\n\n  if (isLost(fieldMatrix)) {\n    looseMessage.classList.remove('hidden');\n  }\n\n  if (isWon(fieldMatrix)) {\n    winMessage.classList.remove('hidden');\n  }\n\n  score.innerText = scoreInner;\n});\n\nmainButton.addEventListener('click', e => {\n  if (mainButton.classList.contains('start')) {\n    mainButton.classList.remove('start');\n    mainButton.classList.add('restart');\n    mainButton.innerHTML = 'Restart';\n    document.querySelector('.message-start').classList.add('hidden');\n  }\n\n  clearfield(fieldMatrix);\n  scoreInner = 0;\n  score.innerText = scoreInner;\n\n  if (!looseMessage.classList.contains('hidden')) {\n    looseMessage.classList.add('hidden');\n  }\n\n  if (!winMessage.classList.contains('hidden')) {\n    winMessage.classList.add('hidden');\n  }\n\n  addToRandomCell(fieldMatrix);\n  addToRandomCell(fieldMatrix);\n});\n\nfunction moveUp(field) {\n  let isPossible = false;\n\n  for (let i = 0; i < field.length; i++) {\n    let lastDoubledIndex = null;\n\n    for (let j = 1; j < field.length; j++) {\n      if (!field[j][i].innerHTML) {\n        continue;\n      }\n\n      let upIndex = j - 1;\n      let isDoubled = false;\n      let cellScore = field[j][i].innerHTML;\n\n      while (upIndex >= 0\n          && (upIndex > lastDoubledIndex || lastDoubledIndex === null)) {\n        const upCellScore = field[upIndex][i].innerHTML;\n\n        if ((cellScore === upCellScore && isDoubled)\n          || (cellScore !== upCellScore && upCellScore)) {\n          break;\n        }\n\n        if (!isPossible) {\n          isPossible = true;\n        }\n\n        if (cellScore === upCellScore && !isDoubled) {\n          const doubledNumber = (+upCellScore) + (+cellScore);\n\n          swapCells(field[upIndex + 1][i]\n            , field[upIndex][i]\n            , doubledNumber);\n          cellScore = doubledNumber;\n          isDoubled = true;\n          scoreInner += doubledNumber;\n          lastDoubledIndex = upIndex;\n        } else {\n          swapCells(field[upIndex + 1][i], field[upIndex][i], cellScore);\n        }\n\n        upIndex--;\n      }\n    }\n  }\n\n  if (isPossible) {\n    addToRandomCell(fieldMatrix);\n  }\n}\n\nfunction moveDown(field) {\n  let isPossible = false;\n\n  for (let i = 0; i < field.length; i++) {\n    let lastDoubledIndex = null;\n\n    for (let j = field.length - 2; j >= 0; j--) {\n      if (!field[j][i].innerHTML) {\n        continue;\n      }\n\n      let downIndex = j + 1;\n      let isDoubled = false;\n      let cellScore = field[j][i].innerHTML;\n\n      while (downIndex < (lastDoubledIndex || field.length)) {\n        const downCellScore = field[downIndex][i].innerHTML;\n\n        if ((cellScore === downCellScore && isDoubled)\n          || (cellScore !== downCellScore && downCellScore)) {\n          break;\n        }\n\n        if (!isPossible) {\n          isPossible = true;\n        }\n\n        if (cellScore === downCellScore && !isDoubled) {\n          const doubledNumber = (+downCellScore) + (+cellScore);\n\n          swapCells(\n            field[downIndex - 1][i], field[downIndex][i], doubledNumber\n          );\n          cellScore = doubledNumber;\n          scoreInner += doubledNumber;\n          lastDoubledIndex = downIndex;\n          isDoubled = true;\n        } else {\n          swapCells(field[downIndex - 1][i], field[downIndex][i], cellScore);\n        }\n\n        downIndex++;\n      }\n    }\n  }\n\n  if (isPossible) {\n    addToRandomCell(fieldMatrix);\n  }\n}\n\nfunction moveLeft(field) {\n  let isPossible = false;\n\n  for (let i = 0; i < field.length; i++) {\n    let lastDoubledIndex = null;\n\n    for (let j = 1; j < field[i].length; j++) {\n      if (!field[i][j].innerHTML) {\n        continue;\n      }\n\n      let leftIndex = j - 1;\n      let isDoubled = false;\n      let cellScore = field[i][j].innerHTML;\n\n      while (leftIndex >= 0\n          && (leftIndex > lastDoubledIndex || lastDoubledIndex === null)) {\n        const leftCellScore = field[i][leftIndex].innerHTML;\n\n        if ((cellScore === leftCellScore && isDoubled)\n            || (cellScore !== leftCellScore && leftCellScore)) {\n          break;\n        }\n\n        if (!isPossible) {\n          isPossible = true;\n        }\n\n        if (cellScore === leftCellScore && !isDoubled) {\n          const doubledNumber = (+leftCellScore) + (+cellScore);\n\n          swapCells(\n            field[i][leftIndex + 1], field[i][leftIndex], doubledNumber\n          );\n          cellScore = doubledNumber;\n          isDoubled = true;\n          scoreInner += doubledNumber;\n          lastDoubledIndex = leftIndex;\n        } else {\n          swapCells(field[i][leftIndex + 1], field[i][leftIndex], cellScore);\n        }\n\n        leftIndex--;\n      }\n    }\n  }\n\n  if (isPossible) {\n    addToRandomCell(fieldMatrix);\n  }\n}\n\nfunction moveRight(field) {\n  let isPossible = false;\n\n  for (let i = 0; i < field.length; i++) {\n    let lastDoubledIndex = null;\n\n    for (let j = field[i].length - 2; j >= 0; j--) {\n      if (!field[i][j].innerHTML) {\n        continue;\n      }\n\n      let rightIndex = j + 1;\n      let isDoubled = false;\n      let cellScore = field[i][j].innerHTML;\n\n      while (rightIndex < (lastDoubledIndex || field[i].length)) {\n        const rightCellScore = field[i][rightIndex].innerHTML;\n\n        if ((cellScore === rightCellScore && isDoubled)\n            || (cellScore !== rightCellScore && rightCellScore)) {\n          break;\n        }\n\n        if (!isPossible) {\n          isPossible = true;\n        }\n\n        if (cellScore === rightCellScore && !isDoubled) {\n          const doubledNumber = (+rightCellScore) + (+cellScore);\n\n          swapCells(\n            field[i][rightIndex - 1], field[i][rightIndex], doubledNumber\n          );\n          cellScore = doubledNumber;\n          isDoubled = true;\n          scoreInner += doubledNumber;\n          lastDoubledIndex = rightIndex;\n        } else {\n          swapCells(field[i][rightIndex - 1], field[i][rightIndex], cellScore);\n        }\n\n        rightIndex++;\n      }\n    }\n  }\n\n  if (isPossible) {\n    addToRandomCell(fieldMatrix);\n  }\n}\n\nfunction isLost(field) {\n  for (let i = 0; i < field.length; i++) {\n    if (field[i].findIndex(cell => {\n      if (!cell.innerHTML) {\n        return true;\n      }\n    }) !== -1) {\n      return false;\n    }\n  }\n\n  for (let i = 0; i < field.length; i++) {\n    const topIndex = (i - 1) >= 0 ? (i - 1) : 0;\n\n    for (let j = 0; j < field[i].length; j++) {\n      const currentCellScore = field[i][j].innerHTML;\n      const leftIndex = (j - 1) >= 0 ? (j - 1) : 0;\n\n      if (currentCellScore === field[topIndex][j].innerHTML && i !== 0) {\n        return false;\n      }\n\n      if (currentCellScore === field[i][leftIndex].innerHTML && j !== 0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction isWon(field) {\n  for (let i = 0; i < field.length; i++) {\n    for (let j = 0; j < field[i].length; j++) {\n      if (field[i][j].innerHTML === WIN_SCORE) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction swapCells(mainCell, targetCell, mainCellScore) {\n  mainCell.innerHTML = '';\n  mainCell.className = 'field-cell';\n  targetCell.innerHTML = mainCellScore;\n  targetCell.className = `field-cell field-cell--${mainCellScore}`;\n}\n\nfunction addToRandomCell(field) {\n  const emptyCells = [];\n\n  field.forEach(row => {\n    row.forEach(cell => {\n      if (!cell.innerHTML) {\n        emptyCells.push(cell);\n      }\n    });\n  });\n\n  const randomIndex = Math.floor(Math.random() * emptyCells.length);\n  const random = Math.random();\n\n  const numberToAdd = random <= 0.1 ? 4 : 2;\n\n  emptyCells[randomIndex].classList.add(`field-cell--${numberToAdd}`);\n  emptyCells[randomIndex].innerHTML = numberToAdd;\n}\n\nfunction clearfield(field) {\n  for (let i = 0; i < field.length; i++) {\n    for (let j = 0; j < field[i].length; j++) {\n      field[i][j].className = 'field-cell';\n      field[i][j].innerHTML = '';\n    }\n  }\n}\n"]}